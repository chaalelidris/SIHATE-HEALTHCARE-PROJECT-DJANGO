
def newAppointment(request):
    form = PostForm(request.POST)

    if form.is_valid():
        appointment = form.save(commit=False)
        appointment.id_patient = request.user.id
        appointment.id_medecin = 1
        appointment.num_appointment = 1
        # WE NEED ID_PATIENT + ID_SEC + NUMERORDV IS STATIC PROBLEM
        appointment.save()
    context = {
        "form": form,
    }

    return render(request, "pages/doctor/appointment_form", context)


def appointment(request):
    current_user = request.user
    appointment = Appointment.objects.filter(id_patient=current_user.id)
    return render(
        request, "pages/patient/patient_rdv.html", {"appointment": appointment}
    )


@login_required
def rd_create(request, template_name="pages/patient/rd_form.html"):
    form = AppointmentForm(request.POST or None)

    if form.is_valid():
        rdv = form.save(commit=False)
        rdv.id_patient = request.user
        rdv.num_rdv = countAppointment()
        rdv.save()
        return redirect("rd")
    return render(
        request,
        template_name,
    )


@login_required
def rd_update(request, id):
    # dictionary for initial data with
    # field names as keys
    context = {}

    appointment = get_object_or_404(Appointment, id=id)

    form = AppointmentForm(request.POST or None, instance=appointment)

    if form.is_valid():
        appointment.id_patient = request.user
        form.save()
        return redirect("rd")

    context["form"] = form

    return render(request, "pages/patient/rd_form.html", context)


@login_required
def rd_delete(request, id):
    # dictionary for initial data with
    # field names as keys
    context = {}

    rdv = get_object_or_404(Appointment, id=id)

    if request.method == "POST":
        rdv.id_patient = request.user
        rdv.delete()
        rdv.num_rdv = countAppointment()

        return redirect("rd")

    return render(request, "pages/patient/rd_confirm_delete.html", context)
